name: VRC Asset Release
on:
  push:
    tags:
      - "*.*.*"

env:
  ASSETS_PATH: .
  RELEASE_PATH: Packages


jobs:
  build:
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check if package.json exists
        run: |
          if [ ! -f package.json ]; then
            echo "package.json not found"
            exit 1
          fi

      - name: Get package.json
        id: get_package_json
        run: |
          content=$(cat package.json)
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "::set-output name=package_json::$content"

      - name: Get needed Data
        id: job_data
        run: |
          version=$(echo "${{ github.ref }}" | sed 's/refs\/heads\/release\///')
          version=$(echo $version | tr '[:upper:]' '[:lower:]')
          echo "::set-output name=version::$version"
          major_version=$(echo $version | cut -d '.' -f 1)
          minor_version=$(echo $version | cut -d '.' -f 2)
          echo "::set-output name=major_version::$major_version"
          echo "::set-output name=minor_version::$minor_version"
          echo "::set-output name=package_name::$(echo ${{ fromJson(steps.get_package_json.outputs.package_json).name }})"
          echo "::set-output name=package_display_name::$(echo ${{ fromJson(steps.get_package_json.outputs.package_json).displayName }})"


      - name: Create Packages
        id: create_packages
        uses: VRLabs/VRCTools-Packaging-Action@v1
        with:
          path: '${{ env.ASSETS_PATH }}'
          outputPath: '${{ env.RELEASE_PATH }}'
          releaseUrl: 'https://github.com/${{ github.repository }}/releases/download/${{ steps.job_data.outputs.version }}/${{ steps.job_data.outputs.package_name }}-${{ steps.job_data.outputs.version }}.zip'
          unityReleaseUrl: 'https://github.com/${{ github.repository }}/releases/download/${{ steps.job_data.outputs.version }}/${{ steps.job_data.outputs.package_name }}-${{ steps.job_data.outputs.version }}.unitypackage'
          releaseVersion: '${{ steps.job_data.outputs.version }}'

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: "${{ steps.job_data.outputs.package_display_name }} ${{ steps.job_data.outputs.version }}"
          files: |
            ${{ steps.create_packages.outputs.unityPackagePath }}
            ${{ steps.create_packages.outputs.vccPackagePath }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SOURCE_TAG: ${{ steps.job_data.outputs.version }}